                CS360 LAB Assignment #3
                 DUE & DEM: 2-20-2020

          Turn in a hard copy of your code with outputs
		
1. Download ~samples/LAB3/c4.5.c
   It solves a system of N linear equations with N threads.
		
   Modify it to do Problem 4.5 in the Problems Section of textbook:
     Input a NTHREADS nmumber, which may be 2,4 or any number<=N
									      
		
2. Download ~samples/LAB3/lu.c
   It solves a system of linear equations by LU decomposition
								
===== Solve system of linear equations by LU decomposition =====

(1). Theory:
      A*X = B
can be solved by decomposing A into L and U, such that
      A = L*U
where L is a  lower triangular matrix with diagonal elements = 1,
              and 0's above the diagnal
      U is an upper triangular matrix with 0's below the diagonal

Rewrite  A*X = B  as  L*U*X = B   OR
                      L*Y   = B   and   U*X = Y

Solve for Y by L*Y = B;  then solve for X by U*X = Y

(2). If using Partial Pivoting, which may exchange rows of A, it amounts to
     multiply A by a permutation matrix P, so that

	   P*A = L*U   
           A*X = B      becomes                       
         P*A*X = P*B      OR     L*U*X = P*B  because (inverse of P) = P
          
The algorithm of LU decomposition with partial pivoting is shown below:

#define n 8

double a[n,n] = data matrix A
double l[n,n] = lower: initialized to all 0 except L[i][i] = 1.0
double u[n,n] = upper: initilaized to all 0
int    p[n]   = permutation vector; initialized as [0,1,2,,,.N-1]
								
// these are defined as row vectors but used as COLUMN vectors in the equations
double b[n]   = constants vector;
double y[n]   = temporary solution vector; initialied to 0
double x[n]   = solution  vector

                       Algorithm
================================================================
int i,j,k;

for k = 0 to n-1 do{
    max = 0;
    for i = k to n-1 do {
        if max < |a(i,k)|{
           max = |a(i,k)|;
           j = i;
        }
        if max == 0
           error (singular matrix)

        swap p[k] and p[j]             // exchanged row numbers
        swap row a(k) and row a(j)
        swap l(k,0:k-2) and l(j,0:k-2)

        u(k,k) = a(k,k)
        for i = k+1 to n-1 do{
           l(i,k) = a(i,k)/u(k,k)
           u(k,i) = a(k,i)
        }

        for i = k+1 to n-1 do{
           for j = k+1 to n-1 do{
             a(i,j) = a(i,j) - l(i,k)*u(k,j)
           }
       }
   }

After getting P, L and U, solve L*Y = P*B; then U*X = Y;
		 
============================================================================

                          REQUIREMENT:

Re-write lu.c as a parallel plu.c program for N=8 using N concurrent pthreads.
(HINT: consult program c4.5).

|   8.00    1.00    1.00    1.00    1.00    1.00    1.00    1.00   |
|   0.00    8.00    1.00    1.00    1.00    1.00    0.88    0.88   |
|   0.00    0.00    8.00    1.00    1.00    0.75    0.77    0.77   |
|   0.00    0.00    0.00    8.00    0.63    0.66    0.77    0.67   |
|   0.00    0.00    0.00    0.00    7.59    0.67    0.68    0.68   |
|   0.00    0.00    0.00    0.00    0.00    7.55    0.70    0.77   |
|   0.00    0.00    0.00    0.00    0.00    0.00    7.48    0.64   |
|   0.00    0.00    0.00    0.00    0.00    0.00    0.00    7.36   |